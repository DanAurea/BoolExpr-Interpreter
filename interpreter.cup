// Specification Jcup
import java_cup.runtime.*;
import java.util.Map;
import java.util.HashMap;

parser code {:
	public static void main(String args[]) throws Exception{
		new parser(new Yylex(System.in)).parse();
	}
:}

action code {:
	HashMap<String, Boolean> symbolTable = new HashMap<String, Boolean>();
:}

terminal String id ;
terminal print;
terminal assign;
terminal lbracket;
terminal rbracket;
terminal and;
terminal or	;
terminal True;
terminal False;
terminal not;
terminal NL;

non terminal	BLOCK;
non terminal	Boolean CONSTANT;
non terminal 	Boolean EXPR;
non terminal	Boolean SEXPR;
non terminal	Boolean TERM;

BLOCK		::=	EXPR {: System.out.println("Au revoir !");:} | 	EXPR NL BLOCK;

EXPR		::=	TERM:bool {: System.out.println(bool ? "vrai" : "faux"); :} 		|	id:id assign TERM:bool {: 
																								symbolTable.put(id, bool);
																								System.out.printf(id + " vaut %s\n", bool ? "vrai" : "faux"); 
																							:}	
																| 	print {: 	
																				if(!symbolTable.isEmpty()){
																					System.out.println("Les valeurs des variables sont : ");
																					for(Map.Entry<String, Boolean> entry: symbolTable.entrySet()){
																						String key 		= 	entry.getKey();
																						Boolean value  =	entry.getValue();
																						System.out.printf(key + " vaut %s\n", value ? "vrai" : "faux");
																					} 
																				}else
																					System.out.println("Table des symboles vides.");
																			:}
																|;

TERM 		::= SEXPR:bool {: RESULT = bool; :} 		|	SEXPR:e1 and SEXPR:e2 {: RESULT = e1 && e2; :} | SEXPR:e1 or SEXPR:e2 {: RESULT = e1 || e2; :};

SEXPR		::= CONSTANT:bool {: RESULT = bool; :}	|	id:id {: 	
																	if(!symbolTable.containsKey(id)){
																		System.err.println(id + " is not declared.");
																	}else
																		RESULT = symbolTable.get(id);  
																:}	
																|	not SEXPR:bool {: RESULT = !bool; :}	
																|	lbracket TERM:bool rbracket {: RESULT = bool;:};

CONSTANT	::=	True {: RESULT = true; :}		| 	False {: RESULT = false; :};